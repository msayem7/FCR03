{"version":3,"file":"js/13.6f4f59ce.js","mappings":"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","sources":["webpack://crf03/./src/views/ChequeEntryView.vue","webpack://crf03/./src/views/ChequeEntryView.vue?4e79"],"sourcesContent":["<template>\r\n  <div class=\"container mt-4\">\r\n    <h2 class=\"mb-4\">{{ editing ? 'Edit' : 'Create' }} Cheque</h2>\r\n    \r\n    <form @submit.prevent=\"handleSubmit\">\r\n      <div class=\"row g-3\">\r\n        <!-- Customer Select -->\r\n        <div class=\"col-md-6 form-floating\">\r\n          <select \r\n            v-model=\"form.customer\" \r\n            class=\"form-select\" \r\n            id=\"customerSelect\"\r\n            required\r\n            :disabled=\"loadingCustomers\"\r\n          >            \r\n            <option v-if=\"loadingCustomers\" value=\"\" disabled>\r\n              Loading customers...\r\n            </option>\r\n            <template v-else>\r\n              <option value=\"\" disabled hidden>Select customer</option>\r\n              <option v-for=\"c in customers\" :value=\"c.alias_id\" :key=\"c.alias_id\">\r\n                {{ c.name }}\r\n              </option>\r\n            </template>            \r\n          </select>\r\n          <label for=\"customerSelect\">Customer</label>\r\n          <div v-if=\"customerError\" class=\"text-danger mt-1\">\r\n            {{ customerError }}\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Received Date -->\r\n        <div class=\"col-md-6 form-floating\">\r\n          <input \r\n            v-model=\"form.received_date\" \r\n            type=\"date\" \r\n            class=\"form-control\" \r\n            id=\"receivedDate\"\r\n            required\r\n          >\r\n          <label for=\"receivedDate\">Received Date</label>\r\n        </div>\r\n\r\n        <!-- Cheque Details -->\r\n        <div class=\"col-md-4 form-floating\">\r\n          <input \r\n            v-model=\"form.cheque_amount\" \r\n            type=\"number\" \r\n            step=\"0.01\" \r\n            class=\"form-control\" \r\n            id=\"chequeAmount\"\r\n            required\r\n          >\r\n          <label for=\"chequeAmount\">Amount</label>\r\n        </div>\r\n\r\n        <div class=\"col-md-4 form-floating\">\r\n          <input \r\n            v-model=\"form.cheque_date\" \r\n            type=\"date\" \r\n            class=\"form-control\" \r\n            id=\"chequeDate\"\r\n          >\r\n          <label for=\"chequeDate\">Cheque Date</label>\r\n        </div>\r\n\r\n        <div class=\"col-md-4 form-floating\">\r\n          <select \r\n            v-model=\"form.cheque_status\" \r\n            class=\"form-select\" \r\n            id=\"chequeStatus\"\r\n          >\r\n            <option v-for=\"status in statusOptions\" :value=\"status.value\" :key=\"status.value\">\r\n              {{ status.text }}\r\n            </option>\r\n          </select>\r\n          <label for=\"chequeStatus\">Status</label>\r\n        </div>\r\n\r\n        <!-- Image Upload -->\r\n        <div class=\"col-12 form-floating\">\r\n          <input \r\n            type=\"file\" \r\n            @change=\"handleFile\" \r\n            class=\"form-control\" \r\n            id=\"chequeImage\"\r\n            accept=\"image/*\"\r\n          >\r\n          <label for=\"chequeImage\">Cheque Image</label>\r\n        </div>\r\n\r\n        <!-- Image Previews -->\r\n        <div v-if=\"imagePreview\" class=\"col-12\">\r\n          <h6 class=\"text-muted mb-2\">Preview:</h6>\r\n          <img :src=\"imagePreview\" class=\"img-thumbnail\" style=\"max-width: 300px\">\r\n        </div>\r\n        <div v-if=\"existingImage\" class=\"col-12\">\r\n          <h6 class=\"text-muted mb-2\">Current Image:</h6>\r\n          <img :src=\"existingImage\" class=\"img-thumbnail\" style=\"max-width: 300px\">\r\n        </div>\r\n\r\n        <!-- Invoice Adjustments -->\r\n        <div class=\"col-12\">\r\n          <button type=\"button\" @click=\"showInvoices\" class=\"btn btn-secondary mb-3\">\r\n            Show Invoices\r\n          </button>\r\n          \r\n          <div v-if=\"showInvoiceGrid\" class=\"card\">\r\n            <div class=\"card-body\">\r\n              <table class=\"table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Invoice #</th>\r\n                    <th>Date</th>\r\n                    <th>Amount</th>\r\n                    <th>Adjustment</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr v-for=\"invoice in customerInvoices\" :key=\"invoice.alias_id\">\r\n                    <td>{{ invoice.invoice_no }}</td>\r\n                    <td>{{ formatDate(invoice.transaction_date) }}</td>\r\n                    <td>{{ invoice.due_amount }}</td>\r\n                    <td>\r\n                      <input \r\n                        type=\"number\" \r\n                        v-model=\"adjustments[invoice.alias_id]\" \r\n                        min=\"0\" \r\n                        step=\"0.01\" \r\n                        class=\"form-control\"\r\n                        @change=\"validateAdjustment(invoice)\"\r\n                      >\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Submit -->\r\n        <div class=\"col-12\">\r\n          <button type=\"submit\" class=\"btn btn-primary me-2\">Save</button>\r\n          <router-link to=\"/cheques\" class=\"btn btn-secondary\">Cancel</router-link>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, watch } from 'vue'\r\nimport { useRoute, useRouter } from 'vue-router'\r\nimport axios from '@/plugins/axios'\r\nimport { formatDate } from '@/utils/dateFormatter';\r\nimport { useBranchStore } from '@/stores/branchStore';\r\n\r\nconst branchStore = useBranchStore()\r\nconst route = useRoute()\r\nconst router = useRouter()\r\n\r\nconst editing = computed(() => !!route.params.aliasId)\r\n// State\r\nconst loadingCustomers = ref(true)\r\nconst customerError = ref(null)\r\n\r\nconst form = ref({\r\n  customer: '',\r\n  received_date: new Date().toISOString().split('T')[0],\r\n  cheque_amount: 0,\r\n  cheque_date: null,\r\n  cheque_status: 1,\r\n  cheque_image: null,\r\n  version: 1\r\n})\r\nconst imagePreview = ref(null)\r\nconst existingImage = ref(null)\r\nconst showInvoiceGrid = ref(false)\r\nconst customerInvoices = ref([])\r\nconst adjustments = ref({})\r\n\r\n// Data\r\nconst customers = ref([])\r\nconst statusOptions = [\r\n  { value: 1, text: 'Received' },\r\n  { value: 2, text: 'Deposited' },\r\n  { value: 3, text: 'Honored' },\r\n  { value: 4, text: 'Dishonored' },\r\n  { value: 5, text: 'Canceled' }\r\n]\r\n\r\nconst handleFile = (e) => {\r\n  const file = e.target.files[0]\r\n  if (file) {\r\n    form.value.cheque_image = file\r\n    imagePreview.value = URL.createObjectURL(file)\r\n  }\r\n}\r\n\r\nconst fetchCustomers =async ()=>{  \r\n  try {\r\n    const params = {\r\n        is_active: true,\r\n        branch: branchStore.selectedBranch\r\n      }\r\n\r\n    const { data } = await axios.get('/customers/', {params})\r\n    customers.value = data\r\n    loadingCustomers.value = true\r\n    \r\n  } catch (error) {\r\n    customerError.value = 'Failed to load customers. Please try again later.'\r\n  } finally {\r\n    loadingCustomers.value = false\r\n  }\r\n}\r\n\r\nconst showInvoices = async () => {\r\n  if (!form.value.customer) return alert('Select customer first')\r\n  try {\r\n    const { data } = await axios.get(`/credit-invoices/?customer=${form.value.customer}&status=true`)\r\n    customerInvoices.value = data\r\n    showInvoiceGrid.value = true\r\n  } catch (error) {\r\n    alert(error.message)\r\n  }\r\n}\r\n\r\nconst validateAdjustment = (invoice) => {\r\n  if (new Date(form.value.received_date) < new Date(invoice.transaction_date)) {\r\n    alert('Cheque date must be after invoice date')\r\n    adjustments.value[invoice.alias_id] = 0\r\n  }\r\n}\r\n\r\nconst handleSubmit = async () => {\r\n  try {\r\n    const branch = localStorage.getItem('workingBranch')\r\n    if (!branch) throw new Error('Select a branch first')\r\n    \r\n    const formData = new FormData()\r\n    Object.entries(form.value).forEach(([key, val]) => {\r\n      if (key === 'cheque_image' && !val) return\r\n      formData.append(key, val)\r\n    })\r\n    formData.append('branch', branch)\r\n\r\n\r\n    // Process adjustments\r\n    // const invoiceCheques = Object.entries(adjustments.value)\r\n    //   .filter(([_, amount]) => amount > 0)\r\n    //   .map(([invoice, amount]) => ({\r\n    //     creditinvoice: invoice, \r\n    //     adjusted_amount: amount\r\n    //   }))\r\n\r\n    const invoiceCheques = Object.entries(adjustments.value)\r\n      .filter(([_, amount]) => amount > 0)\r\n      .map(([invoiceAlias, amount]) => {\r\n        // Convert amount to number\r\n        const numericAmount = parseFloat(amount)\r\n        if (isNaN(numericAmount)) {\r\n          throw new Error(`Invalid amount for invoice ${invoiceAlias}`)\r\n        }\r\n        \r\n        return {\r\n          creditinvoice: invoiceAlias,\r\n          adjusted_amount: numericAmount  // Ensure numeric value\r\n        }\r\n      })\r\n\r\n    formData.append('invoice_cheques', JSON.stringify(invoiceCheques))\r\n\r\n    if (route.params.aliasId) {\r\n      await axios.put(`/cheques/${route.params.aliasId}/`, formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      })\r\n    } else {\r\n      await axios.post('/cheques/', formData, {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      })\r\n    }\r\n    \r\n    router.push('/cheques')\r\n  } catch (error) {\r\n    alert(error.response?.data?.error || error.message)\r\n  }\r\n}\r\n\r\nwatch(() => branchStore.selectedBranch, (newBranch, oldBranch) => {\r\n  if (oldBranch && newBranch !== oldBranch) {\r\n    // Show alert to user\r\n    alert('Branch has changed. Redirecting to cheque list.')\r\n    // Redirect to cheques list\r\n    router.push('/cheques')\r\n  }\r\n}, { immediate: true })\r\n\r\nwatch(() => form.value.customer, (newCustomer, oldCustomer) => {\r\n  if (oldCustomer && newCustomer !== oldCustomer) {\r\n    customerInvoices.value = []\r\n    adjustments.value = {}\r\n    showInvoiceGrid.value = false\r\n  }\r\n}, { immediate: true })\r\n\r\n\r\nonMounted(async () => {\r\n  fetchCustomers()\r\n  editing.value = !!route.params.aliasId; \r\n  \r\n  if (route.params.aliasId) {\r\n    const { data: cheque } = await axios.get(`/cheques/${route.params.aliasId}/`,{\r\n      params: { include_invoice_cheques: true }\r\n    })\r\n\r\n    form.value = {\r\n      ...cheque,\r\n      customer: cheque.customer,\r\n      version: cheque.version\r\n    }\r\n    if (cheque.invoice_cheques) {\r\n      cheque.invoice_cheques.forEach(mapping => {\r\n        //adjustments.value[mapping.creditinvoice.alias_id] = mapping.adjusted_amount\r\n        adjustments.value[mapping.creditinvoice] = mapping.adjusted_amount\r\n      })\r\n    }\r\n\r\n    if (cheque.cheque_image) {\r\n      existingImage.value = cheque.cheque_image\r\n    }   \r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.table {\r\n  font-size: 0.9rem;\r\n}\r\n.card {\r\n  margin-top: 1rem;\r\n}\r\n.img-thumbnail {\r\n  max-height: 200px;\r\n}\r\n</style>","import script from \"./ChequeEntryView.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ChequeEntryView.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./ChequeEntryView.vue?vue&type=style&index=0&id=8f00a51c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-8f00a51c\"]])\n\nexport default __exports__"],"names":["branchStore","useBranchStore","route","useRoute","router","useRouter","editing","computed","params","aliasId","loadingCustomers","ref","customerError","form","customer","received_date","Date","toISOString","split","cheque_amount","cheque_date","cheque_status","cheque_image","version","imagePreview","existingImage","showInvoiceGrid","customerInvoices","adjustments","customers","statusOptions","value","text","handleFile","e","file","target","files","URL","createObjectURL","fetchCustomers","async","is_active","branch","selectedBranch","data","axios","get","error","showInvoices","alert","message","validateAdjustment","invoice","transaction_date","alias_id","handleSubmit","localStorage","getItem","Error","formData","FormData","Object","entries","forEach","key","val","append","invoiceCheques","filter","_","amount","map","invoiceAlias","numericAmount","parseFloat","isNaN","creditinvoice","adjusted_amount","JSON","stringify","put","headers","post","push","response","watch","newBranch","oldBranch","immediate","newCustomer","oldCustomer","onMounted","cheque","include_invoice_cheques","invoice_cheques","mapping","__exports__"],"sourceRoot":""}