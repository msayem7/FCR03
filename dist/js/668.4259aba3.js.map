{"version":3,"file":"js/668.4259aba3.js","mappings":"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","sources":["webpack://crf03/./src/views/CustomerClaims.vue","webpack://crf03/./src/views/CustomerClaims.vue?da8c","webpack://crf03/./src/views/CreditInvoiceEntry.vue","webpack://crf03/./src/views/CreditInvoiceEntry.vue?8c7b"],"sourcesContent":["<template>\r\n    <div class=\"customer-claims\">\r\n      \r\n      <div v-if=\"loadingClaims\" class=\"text-center\">\r\n        <div class=\"spinner-border text-primary\" role=\"status\">\r\n          <span class=\"visually-hidden\">Loading...</span>\r\n        </div>\r\n        <p class=\"mt-2\">Loading claims...</p>\r\n      </div>\r\n  \r\n      <div v-else>\r\n        <table class=\"table table-striped\">\r\n          <thead>\r\n            <tr>\r\n              <th>Claim Name</th>\r\n              <th>Claim Amount</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"claim in claims\" :key=\"claim.alias_id\">\r\n              <td>{{ claim.claim_name }}</td>\r\n              <td>\r\n                <input\r\n                  type=\"number\"\r\n                  v-model=\"claim.claim_amount\"\r\n                  @blur=\"validateNumber(claim)\"\r\n                  class=\"form-control\"\r\n                  :disabled=\"!claim.is_active && !claim.existing\"\r\n                />\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, defineProps, defineExpose, onMounted, watch } from 'vue';\r\n  import axios from '@/plugins/axios';\r\n  import { useBranchStore } from '@/stores/branchStore';\r\n  \r\n  const props = defineProps({\r\n    invoiceAliasId: String, // For existing invoices \r\n    customerAliasId: String, // For new invoices \r\n  });\r\n  \r\n  const branchStore = useBranchStore();\r\n  const claims = ref([]);\r\n  const loadingClaims = ref(false);\r\n  \r\n  // Update input handler to validate numbers\r\n  const validateNumber = (claim) => {\r\n    const value = parseFloat(claim.claim_amount)\r\n    if (isNaN(value)) {\r\n      claim.claim_amount = 0\r\n    } else {\r\n      claim.claim_amount = Math.max(0, value).toFixed(4)\r\n    }\r\n  }\r\n\r\n\r\n  // Fetch claims for the selected branch and customer\r\n  const fetchClaims = async () => {\r\n    try {\r\n      loadingClaims.value = true;\r\n      const params = {\r\n        branch: branchStore.selectedBranch,\r\n        is_active: true,\r\n      };\r\n      \r\n//--------------------------------------\r\n      const { data: masterClaimsData } = await axios.get('/master-claims/', { params });\r\n      //const { data1 } = await axios.get('/master-claims/', { params });\r\n      console.log('masterClaimsData: ', masterClaimsData)\r\n      let claimsData1 = masterClaimsData.map((claim) => ({\r\n          ...claim,\r\n          claim_amount: 0, // Default amount for new claims\r\n          existing: false, // Indicates if this is an existing claim\r\n      }));\r\n      console.log('claimsData1: ', claimsData1)\r\n      console.log('props.invoiceAliasId: ', props.invoiceAliasId)\r\n      if (props.invoiceAliasId){\r\n        const { data: customerClaimsData } = await axios.get(`/customer-claims/?invoice=${props.invoiceAliasId}`);\r\n        console.log('customerClaimsData: ', customerClaimsData)\r\n        const claimsData2 = customerClaimsData.map((claim) => ({\r\n            ...claim,\r\n            existing: true, // Indicates if this is an existing claim\r\n        }));\r\n\r\n        // Create a Set to track unique claim names in claimsData2\r\n        const uniqueNames = new Set(claimsData2.map(claim => claim.name));\r\n\r\n        // Filter out duplicates from claimsData1 based on claim.name\r\n        claimsData1 = claimsData1.filter(claim => !uniqueNames.has(claim.name));\r\n\r\n        // Combine filtered claimsData1 with claimsData2\r\n        claims.value = [...claimsData1, ...claimsData2];\r\n        console.log('Edit claims.value: ', claims.value)\r\n      }else{\r\n        claims.value = [...claimsData1]        \r\n        console.log('Add claims.value: ', claims.value)\r\n      }\r\n      \r\n      // // Fetch active claims for new invoices\r\n      // if (!props.invoiceAliasId) {\r\n      //   const { data } = await axios.get('/master-claims/', { params });\r\n        // claims.value = data.map((claim) => ({\r\n        //   ...claim,\r\n        //   claim_amount: 0, // Default amount for new claims\r\n        //   existing: false, // Indicates if this is an existing claim\r\n        // }));\r\n      // } else {\r\n      //   // Fetch existing claims for the invoice\r\n      //   const { data } = await axios.get(`/customer-claims/?invoice=${props.invoiceAliasId}`);\r\n      //   claims.value = data.map((claim) => ({\r\n      //     ...claim,\r\n      //     existing: true, // Indicates if this is an existing claim\r\n      //   }));\r\n      // }\r\n//-----------------------------------------\r\n\r\n    } catch (error) {\r\n      console.error('Error fetching claims:', error);\r\n      claims.value = []; // Set empty array on error\r\n    } finally {\r\n      loadingClaims.value = false;\r\n    }\r\n  };\r\n  \r\n  // Watch for changes in the selected branch or customer. \r\n  // Watch is not required. If new then all active master claim are fetched. \r\n  // If existing then only  the existing claims  + new active which are not in existing claims are fetched\r\n  // If existing then only  the existing claims  + new active which are not in existing claims are fetched\r\n  // and called from onmounted hook \r\n\r\n  // watch(\r\n  //   () => [branchStore.selectedBranch, props.customerAliasId],\r\n  //   () => {\r\n  //     if (branchStore.selectedBranch && props.customerAliasId) {\r\n  //       fetchClaims();\r\n  //     }\r\n  //   },\r\n  //   { immediate: true }\r\n  // );\r\n \r\nonMounted(async () => {\r\n  await fetchClaims();\r\n})\r\n  // Expose the claims data to the parent component\r\n  defineExpose({\r\n    claims,\r\n  });\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .customer-claims {\r\n    margin-top: 20px;\r\n  }\r\n  \r\n  .table {\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .form-control {\r\n    width: 100px;\r\n  }\r\n  </style>","import script from \"./CustomerClaims.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CustomerClaims.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./CustomerClaims.vue?vue&type=style&index=0&id=96aa420c&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-96aa420c\"]])\n\nexport default __exports__","<template>\r\n  <div class=\"container mt-4\">\r\n    <h2 class=\"mb-4\">{{ editing ? 'Edit' : 'Create' }} Invoice</h2>\r\n    \r\n    <div v-if=\"loading\" class=\"text-center\">\r\n      <div class=\"spinner-border text-primary\" role=\"status\">\r\n        <span class=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n      <p class=\"mt-2\">Loading invoice data...</p>\r\n    </div>\r\n\r\n    <form v-else @submit.prevent=\"handleSubmit\">\r\n      <div class=\"row g-3\">\r\n        <!-- Invoice Number -->\r\n        <div class=\"col-md-6 form-floating\">\r\n          <input \r\n            v-model=\"form.invoice_no\" \r\n            type=\"text\" \r\n            class=\"form-control\" \r\n            id=\"invoiceNo\"\r\n            placeholder=\" \"\r\n            required\r\n          >\r\n          <label for=\"invoiceNo\">Invoice Number</label>\r\n        </div>\r\n\r\n        <!-- Customer Select -->\r\n        <div class=\"col-md-6 form-floating\">\r\n          <select \r\n            v-model=\"form.customer\" \r\n            class=\"form-select\" \r\n            id=\"customerSelect\"\r\n            required \r\n            :disabled=\"loadingCustomers\"\r\n          >\r\n            <option v-if=\"loadingCustomers\" value=\"\" disabled>\r\n              Loading customers...\r\n            </option>\r\n            <template v-else>\r\n              <option value=\"\" disabled hidden>Select a customer</option>\r\n              <option \r\n                v-for=\"c in customers\" \r\n                :value=\"c.alias_id\" \r\n                :key=\"c.alias_id\"\r\n              >\r\n                {{ c.name }}\r\n              </option>\r\n            </template>\r\n          </select>\r\n          <label for=\"customerSelect\">Customer</label>\r\n          <div v-if=\"customerError\" class=\"text-danger mt-1\">\r\n            {{ customerError }}\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Transaction Date -->\r\n        <div class=\"col-md-6 form-floating\">\r\n          <input \r\n            v-model=\"form.transaction_date\" \r\n            type=\"date\" \r\n            class=\"form-control\" \r\n            id=\"transactionDate\"\r\n            placeholder=\" \"\r\n            required\r\n          >\r\n          <label for=\"transactionDate\">Transaction Date</label>\r\n        </div>\r\n\r\n        <!-- Due Amount -->\r\n        <div class=\"col-md-6 form-floating\">\r\n          <input \r\n            v-model=\"form.due_amount\" \r\n            type=\"number\" \r\n            step=\"0.01\" \r\n            class=\"form-control\" \r\n            id=\"dueAmount\"\r\n            placeholder=\" \"\r\n            required\r\n          >\r\n          <label for=\"dueAmount\">Due Amount</label>\r\n        </div>\r\n\r\n        <!-- Grace Days -->\r\n        <div class=\"col-md-6 form-floating\">\r\n          <input \r\n            :value=\"graceDays\" \r\n            type=\"number\" \r\n            class=\"form-control\" \r\n            id=\"graceDays\"\r\n            placeholder=\" \"\r\n            readonly\r\n          >\r\n          <label for=\"graceDays\">Grace Days</label>\r\n        </div>\r\n\r\n        <!-- Payment Date -->\r\n        <div class=\"col-md-6 form-floating\">\r\n          <input \r\n            :value=\"paymentDate\" \r\n            type=\"date\" \r\n            class=\"form-control\" \r\n            id=\"paymentDate\"\r\n            placeholder=\" \"\r\n            readonly\r\n          >\r\n          <label for=\"paymentDate\">Payment Date</label>\r\n        </div>\r\n\r\n        <!-- Image Upload & Preview -->\r\n        <div class=\"col-12\">\r\n          <div class=\"form-floating\">\r\n            <input \r\n              type=\"file\" \r\n              @change=\"handleFile\" \r\n              class=\"form-control\" \r\n              id=\"invoiceImage\"\r\n              placeholder=\" \"\r\n              accept=\"image/*\"\r\n            >\r\n            <label for=\"invoiceImage\">Invoice Image</label>\r\n          </div>\r\n          \r\n          <!-- Image Preview -->\r\n          <div v-if=\"imagePreview\" class=\"mt-3\">\r\n            <h6 class=\"text-muted mb-2\">Preview:</h6>\r\n            <img \r\n              :src=\"imagePreview\" \r\n              class=\"img-thumbnail\" \r\n              style=\"max-width: 300px; max-height: 200px\"\r\n              alt=\"Invoice preview\"\r\n            >\r\n          </div>\r\n          \r\n          <!-- Existing Image -->\r\n          <div v-if=\"existingImageUrl\" class=\"mt-3\">\r\n            <h6 class=\"text-muted mb-2\">Current Invoice Image:</h6>\r\n            <img \r\n              :src=\"existingImageUrl\" \r\n              class=\"img-thumbnail\" \r\n              style=\"max-width: 300px; max-height: 200px\"\r\n              alt=\"Current invoice\"\r\n            >\r\n          </div>\r\n          \r\n        </div>\r\n        <div class=\"col-12\">\r\n          <CustomerClaims\r\n            ref=\"customerClaimsRef\"\r\n            v-if=\"form.invoice_no\"\r\n            :customerAliasId=\"form.customer\"\r\n            :invoiceAliasId=\"invoiceId\"\r\n          />\r\n        </div>\r\n\r\n        <!-- Action Buttons -->\r\n        <div class=\"col-12\">\r\n          <button type=\"submit\" class=\"btn btn-primary me-2\" :disabled=\"submitting\">\r\n            <span v-if=\"submitting\" class=\"spinner-border spinner-border-sm\" role=\"status\"></span>\r\n            {{ submitting ? 'Saving...' : 'Save' }}\r\n          </button>\r\n          <router-link to=\"/credit-invoices\" class=\"btn btn-secondary\">Cancel</router-link>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, watch, nextTick } from 'vue'\r\nimport { useRoute, useRouter } from 'vue-router'\r\nimport axios from '@/plugins/axios'\r\nimport { useBranchStore } from '@/stores/branchStore'\r\nimport CustomerClaims from '@/views/CustomerClaims.vue'\r\n\r\nconst store = useBranchStore()\r\nconst route = useRoute()\r\nconst router = useRouter()\r\n\r\n// State management\r\nconst loading = ref(false)\r\nconst loadingCustomers = ref(true)\r\nconst submitting = ref(false)\r\nconst customerError = ref(null)\r\nconst imagePreview = ref(null)\r\nconst existingImageUrl = ref(null)\r\n\r\n// Data refs\r\nconst editing = ref(false)\r\nconst invoiceId = ref(null)\r\nconst customers = ref([])\r\nconst customerClaimsRef = ref(null)\r\n\r\n// Form data\r\nconst form = ref({\r\n  invoice_no: '',\r\n  customer: '',\r\n  transaction_date: '',\r\n  due_amount: 0,\r\n  invoice_image: null,\r\n  version: 1\r\n})\r\n\r\n// Computed properties\r\nconst graceDays = computed(() => {\r\n  const customer = customers.value.find(c => c.alias_id === form.value.customer)\r\n  return customer?.grace_days || 0\r\n})\r\n\r\nconst paymentDate = computed(() => {\r\n  if (!form.value.transaction_date) return ''\r\n  const date = new Date(form.value.transaction_date)\r\n  if (graceDays.value) date.setDate(date.getDate() + graceDays.value)\r\n  return date.toISOString().split('T')[0]\r\n})\r\n\r\n// File handling\r\nconst handleFile = (e) => {\r\n  const file = e.target.files[0]\r\n  if (file) {\r\n    form.value.invoice_image = file\r\n    imagePreview.value = URL.createObjectURL(file)\r\n    existingImageUrl.value = null\r\n  }\r\n}\r\n\r\n// Data fetching\r\nconst fetchCustomers = async () => {\r\n  try {\r\n    const params = {\r\n      is_active: true,\r\n      branch: store.selectedBranch\r\n    }\r\n    loadingCustomers.value = true\r\n\r\n    const { data } = await axios.get('/customers/', { params })\r\n    customers.value = data\r\n  } catch (error) {\r\n    customerError.value = 'Failed to load customers. Please try again later.'\r\n  } finally {\r\n    loadingCustomers.value = false\r\n  }\r\n}\r\n\r\nconst fetchInvoice = async () => {\r\n  try {\r\n    loading.value = true\r\n    const { data } = await axios.get(`/credit-invoices/${invoiceId.value}/`)\r\n    \r\n    form.value = {\r\n      ...data,\r\n      customer: data.customer, // Direct assignment of alias_id\r\n      version: data.version\r\n    }\r\n\r\n    if (data.invoice_image) {\r\n      existingImageUrl.value = data.invoice_image\r\n    }\r\n\r\n    // Verify customer exists in loaded list\r\n    await nextTick()\r\n    if (!customers.value.some(c => c.alias_id === form.value.customer)) {\r\n      customerError.value = 'Selected customer not found in current list'\r\n    }\r\n  } catch (error) {\r\n    alert(error.response?.data?.error || 'Failed to load invoice')\r\n    router.push('/credit-invoices')\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// Form submission\r\nconst handleSubmit = async () => {\r\n  try {\r\n    submitting.value = true\r\n    const branch = localStorage.getItem('workingBranch')\r\n    if (!branch) throw new Error('Select a branch first')\r\n    \r\n    // Get claims data from child component\r\n    const allClaims = customerClaimsRef.value?.claims || []\r\n    const claimsToSave = allClaims.filter(c => {\r\n      // Filter out zero amounts and invalid claims\r\n      return Number(c.claim_amount) !== 0 && c.claim_amount !== ''\r\n    }).map(c => ({\r\n      alias_id: c.alias_id,\r\n      claim_amount: c.claim_amount,\r\n      existing: c.existing\r\n    }))\r\n\r\n    const formData = new FormData()\r\n    formData.append('version', form.value.version)\r\n    formData.append('claims', JSON.stringify(claimsToSave))\r\n    \r\n    Object.entries(form.value).forEach(([key, val]) => {\r\n      if (key === 'invoice_image') {\r\n        if (val instanceof File) formData.append(key, val)\r\n      } else if (key !== 'version') {\r\n        formData.append(key, val)\r\n      }\r\n    })\r\n    \r\n    formData.append('branch', branch)\r\n\r\n    const response = await axios({\r\n      method: editing.value ? 'put' : 'post',\r\n      url: editing.value ? `/credit-invoices/${invoiceId.value}/` : '/credit-invoices/',\r\n      data: formData,\r\n      headers: { 'Content-Type': 'multipart/form-data' }\r\n    })\r\n\r\n    router.push('/credit-invoices')\r\n  } catch (error) {\r\n    alert(error.response?.data?.error || error.message)\r\n  } finally {\r\n    submitting.value = false\r\n  }\r\n}\r\n\r\n// watch(() => store.selectedBranch, async () => {\r\n//   await fetchCustomers()\r\n// }, { immediate: true })\r\n\r\nwatch(() => store.selectedBranch, (newBranch, oldBranch) => {\r\n  if (oldBranch && newBranch !== oldBranch) {\r\n    // Show alert to user\r\n    alert('Branch has changed. Redirecting to invoice list.')\r\n    // Redirect to invoice list\r\n    router.push('/credit-invoices')\r\n  }\r\n}, { immediate: true })\r\n\r\n\r\n// Initialization\r\nonMounted(async () => {\r\n  await fetchCustomers()\r\n  \r\n  if (route.params.aliasId) {\r\n    editing.value = true\r\n    invoiceId.value = route.params.aliasId\r\n    await fetchInvoice()\r\n  }\r\n})\r\n</script>","import script from \"./CreditInvoiceEntry.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CreditInvoiceEntry.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["props","__props","branchStore","useBranchStore","claims","ref","loadingClaims","validateNumber","claim","value","parseFloat","claim_amount","isNaN","Math","max","toFixed","fetchClaims","async","params","branch","selectedBranch","is_active","data","masterClaimsData","axios","get","console","log","claimsData1","map","existing","invoiceAliasId","customerClaimsData","claimsData2","uniqueNames","Set","name","filter","has","error","onMounted","__expose","__exports__","store","route","useRoute","router","useRouter","loading","loadingCustomers","submitting","customerError","imagePreview","existingImageUrl","editing","invoiceId","customers","customerClaimsRef","form","invoice_no","customer","transaction_date","due_amount","invoice_image","version","graceDays","computed","find","c","alias_id","grace_days","paymentDate","date","Date","setDate","getDate","toISOString","split","handleFile","e","file","target","files","URL","createObjectURL","fetchCustomers","fetchInvoice","nextTick","some","alert","response","push","handleSubmit","localStorage","getItem","Error","allClaims","claimsToSave","Number","formData","FormData","append","JSON","stringify","Object","entries","forEach","key","val","File","method","url","headers","message","watch","newBranch","oldBranch","immediate","aliasId"],"sourceRoot":""}